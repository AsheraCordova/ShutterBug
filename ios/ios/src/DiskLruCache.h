//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\IOSShutterBugPlugin\src\main\java\com\applidium\shutterbug\cache\DiskLruCache.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_DiskLruCache")
#ifdef RESTRICT_DiskLruCache
#define INCLUDE_ALL_DiskLruCache 0
#else
#define INCLUDE_ALL_DiskLruCache 1
#endif
#undef RESTRICT_DiskLruCache

#if !defined (APDiskLruCache_) && (INCLUDE_ALL_DiskLruCache || defined(INCLUDE_APDiskLruCache))
#define APDiskLruCache_

#define RESTRICT_JavaIoCloseable 1
#define INCLUDE_JavaIoCloseable 1
#include "java/io/Closeable.h"

@class APDiskLruCache_Editor;
@class APDiskLruCache_Snapshot;
@class JavaIoFile;

/*!
 @brief A cache that uses a bounded amount of space on a filesystem.Each cache
  entry has a string key and a fixed number of values.
 Values are byte
  sequences, accessible as streams or files. Each value must be between <code>0</code>
  and <code>Integer.MAX_VALUE</code> bytes in length. 
 <p>The cache stores its data in a directory on the filesystem. This
  directory must be exclusive to the cache; the cache may delete or overwrite
  files from its directory. It is an error for multiple processes to use the
  same cache directory at the same time. 
 <p>This cache limits the number of bytes that it will store on the
  filesystem. When the number of stored bytes exceeds the limit, the cache will
  remove entries in the background until the limit is satisfied. The limit is
  not strict: the cache may temporarily exceed it while waiting for files to be
  deleted. The limit does not include filesystem overhead or the cache
  journal so space-sensitive applications should set a conservative limit. 
 <p>Clients call <code>edit</code> to create or update the values of an entry. An
  entry may have only one editor at one time; if a value is not available to be
  edited then <code>edit</code> will return null. 
 <ul>
      <li>When an entry is being <strong>created</strong> it is necessary to
          supply a full set of values; the empty value should be used as a
          placeholder if necessary.     
 <li>When an entry is being <strong>edited</strong>, it is not necessary
          to supply data for every value; values default to their previous
          value. 
 </ul>
  Every <code>edit</code> call must be matched by a call to <code>Editor.commit</code>
  or <code>Editor.abort</code>. Committing is atomic: a read observes the full set
  of values as they were before or after the commit, but never a mix of values. 
 <p>Clients call <code>get</code> to read a snapshot of an entry. The read will
  observe the value at the time that <code>get</code> was called. Updates and
  removals after the call do not impact ongoing reads. 
 <p>This class is tolerant of some I/O errors. If files are missing from the
  filesystem, the corresponding entries will be dropped from the cache. If
  an error occurs while writing a cache value, the edit will fail silently.
  Callers should handle other problems by catching <code>IOException</code> and
  responding appropriately.
 */
@interface APDiskLruCache : NSObject < JavaIoCloseable >

#pragma mark Public

/*!
 @brief Closes this cache.Stored values will remain on the filesystem.
 */
- (void)close;

/*!
 @brief Closes the cache and deletes all of its stored values.This will delete
  all files in the cache directory including files that weren't created by
  the cache.
 */
- (void)delete__;

/*!
 @brief Returns an editor for the entry named <code>key</code>, or null if another
  edit is in progress.
 */
- (APDiskLruCache_Editor *)editWithNSString:(NSString *)key;

/*!
 @brief Force buffered operations to the filesystem.
 */
- (void)flush;

/*!
 @brief Returns a snapshot of the entry named <code>key</code>, or null if it doesn't
  exist is not currently readable.If a value is returned, it is moved to
  the head of the LRU queue.
 */
- (APDiskLruCache_Snapshot *)getWithNSString:(NSString *)key;

/*!
 @brief Returns the directory where this cache stores its data.
 */
- (JavaIoFile *)getDirectory;

/*!
 @brief Returns true if this cache has been closed.
 */
- (jboolean)isClosed;

/*!
 @brief Returns the maximum number of bytes that this cache should use to store
  its data.
 */
- (jlong)maxSize;

/*!
 @brief Opens the cache in <code>directory</code>, creating a cache if none exists
  there.
 @param directory a writable directory
 @param appVersion
 @param valueCount the number of values per cache entry. Must be positive.
 @param maxSize the maximum number of bytes this cache should use to store
 @throw IOExceptionif reading or writing the cache directory fails
 */
+ (APDiskLruCache *)openWithJavaIoFile:(JavaIoFile *)directory
                               withInt:(jint)appVersion
                               withInt:(jint)valueCount
                              withLong:(jlong)maxSize;

/*!
 @brief Drops the entry for <code>key</code> if it exists and can be removed.Entries
  actively being edited cannot be removed.
 @return true if an entry was removed.
 */
- (jboolean)removeWithNSString:(NSString *)key;

/*!
 @brief Returns the number of bytes currently being used to store the values in
  this cache.This may be greater than the max size if a background
  deletion is pending.
 */
- (jlong)size;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(APDiskLruCache)

inline NSString *APDiskLruCache_get_JOURNAL_FILE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *APDiskLruCache_JOURNAL_FILE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(APDiskLruCache, JOURNAL_FILE, NSString *)

inline NSString *APDiskLruCache_get_JOURNAL_FILE_TMP(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *APDiskLruCache_JOURNAL_FILE_TMP;
J2OBJC_STATIC_FIELD_OBJ_FINAL(APDiskLruCache, JOURNAL_FILE_TMP, NSString *)

inline NSString *APDiskLruCache_get_MAGIC(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *APDiskLruCache_MAGIC;
J2OBJC_STATIC_FIELD_OBJ_FINAL(APDiskLruCache, MAGIC, NSString *)

inline NSString *APDiskLruCache_get_VERSION_1(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *APDiskLruCache_VERSION_1;
J2OBJC_STATIC_FIELD_OBJ_FINAL(APDiskLruCache, VERSION_1, NSString *)

inline jlong APDiskLruCache_get_ANY_SEQUENCE_NUMBER(void);
#define APDiskLruCache_ANY_SEQUENCE_NUMBER -1LL
J2OBJC_STATIC_FIELD_CONSTANT(APDiskLruCache, ANY_SEQUENCE_NUMBER, jlong)

FOUNDATION_EXPORT APDiskLruCache *APDiskLruCache_openWithJavaIoFile_withInt_withInt_withLong_(JavaIoFile *directory, jint appVersion, jint valueCount, jlong maxSize);

J2OBJC_TYPE_LITERAL_HEADER(APDiskLruCache)

@compatibility_alias ComApplidiumShutterbugCacheDiskLruCache APDiskLruCache;

#endif

#if !defined (APDiskLruCache_Snapshot_) && (INCLUDE_ALL_DiskLruCache || defined(INCLUDE_APDiskLruCache_Snapshot))
#define APDiskLruCache_Snapshot_

#define RESTRICT_JavaIoCloseable 1
#define INCLUDE_JavaIoCloseable 1
#include "java/io/Closeable.h"

@class APDiskLruCache_Editor;
@class JavaIoInputStream;

/*!
 @brief A snapshot of the values for an entry.
 */
@interface APDiskLruCache_Snapshot : NSObject < JavaIoCloseable >

#pragma mark Public

- (void)close;

/*!
 @brief Returns an editor for this snapshot's entry, or null if either the
  entry has changed since this snapshot was created or if another edit
  is in progress.
 */
- (APDiskLruCache_Editor *)edit;

/*!
 @brief Returns the unbuffered stream with the value for <code>index</code>.
 */
- (JavaIoInputStream *)getInputStreamWithInt:(jint)index;

/*!
 @brief Returns the string value for <code>index</code>.
 */
- (NSString *)getStringWithInt:(jint)index;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(APDiskLruCache_Snapshot)

J2OBJC_TYPE_LITERAL_HEADER(APDiskLruCache_Snapshot)

#endif

#if !defined (APDiskLruCache_Editor_) && (INCLUDE_ALL_DiskLruCache || defined(INCLUDE_APDiskLruCache_Editor))
#define APDiskLruCache_Editor_

@class JavaIoInputStream;
@class JavaIoOutputStream;

/*!
 @brief Edits the values for an entry.
 */
@interface APDiskLruCache_Editor : NSObject

#pragma mark Public

/*!
 @brief Aborts this edit.This releases the edit lock so another edit may be
  started on the same key.
 */
- (void)abort;

/*!
 @brief Commits this edit so it is visible to readers.This releases the
  edit lock so another edit may be started on the same key.
 */
- (void)commit;

/*!
 @brief Returns the last committed value as a string, or null if no value
  has been committed.
 */
- (NSString *)getStringWithInt:(jint)index;

/*!
 @brief Returns an unbuffered input stream to read the last committed value,
  or null if no value has been committed.
 */
- (JavaIoInputStream *)newInputStreamWithInt:(jint)index OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Returns a new unbuffered output stream to write the value at 
 <code>index</code>.If the underlying output stream encounters errors
  when writing to the filesystem, this edit will be aborted when 
 <code>commit</code> is called.
 The returned output stream does not throw
  IOExceptions.
 */
- (JavaIoOutputStream *)newOutputStreamWithInt:(jint)index OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Sets the value at <code>index</code> to <code>value</code>.
 */
- (void)setWithInt:(jint)index
      withNSString:(NSString *)value;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(APDiskLruCache_Editor)

J2OBJC_TYPE_LITERAL_HEADER(APDiskLruCache_Editor)

#endif

#pragma pop_macro("INCLUDE_ALL_DiskLruCache")
